{"version":3,"sources":["Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","startTime","step","autoStart","autoLoop","onTick","onTimeEnd","onTimeStart","onTimePause","useState","timerId","setTimerId","currentTime","setCurrentTime","useEffect","start","stop","setInterval","handleTick","clearInterval","className","onClick","max","value","App","console","log","timeLeft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAkFeA,MA/Ef,YASI,IAAD,IARDC,iBAQC,MARW,IAQX,MAPDC,YAOC,MAPM,IAON,MANDC,iBAMC,aALDC,gBAKC,aAJDC,cAIC,MAJQ,aAIR,MAHDC,iBAGC,MAHW,aAGX,MAFDC,mBAEC,MAFa,aAEb,MADDC,mBACC,MADa,aACb,IAC6BC,mBAAS,MADtC,mBACMC,EADN,KACeC,EADf,OAEqCF,mBAASR,GAF9C,mBAEMW,EAFN,KAEmBC,EAFnB,KAIDC,qBAAU,WACJX,GACFY,MAED,IAEHD,qBAAU,WACJF,EAAc,IAChBI,IACAV,IACAO,EAAeZ,GACXG,GACFW,QAKN,IAAMA,EAAQ,WACZ,IAAML,EAAUO,YAAYC,EAAYhB,GACxCS,EAAWD,IAGPM,EAAO,WACXG,cAAcT,GACdC,EAAW,OAab,SAASO,IACPL,GAAe,SAACD,GAAD,OAAiBA,EAAcV,KAC9CG,EAAOO,EAAcV,GAGvB,OACE,sBAAKkB,UAAU,QAAf,UACE,sBAAKA,UAAU,gBAAf,WACIV,GACA,wBAAQU,UAAU,sBAAsBC,QAnBhD,WACEN,IACAR,EAAYN,IAiBN,mBAIDS,GACC,wBAAQU,UAAU,sBAAsBC,QAnBhD,WACEL,IACAR,EAAYI,IAiBN,sBAKJ,qBAAKQ,UAAU,OAAf,SAAuBR,IACvB,0BACEQ,UAAU,gBACVE,IAAKrB,EACLsB,MAAOX,QClCAY,MAxCf,WACE,OACE,gCACE,cAAC,EAAD,CACEtB,KAAM,IACNC,WAAW,EACXG,UAAW,kBAAMmB,QAAQC,IAAI,6DAC7BnB,YAAa,SAACoB,GACZF,QAAQC,IAAI,2FAEdlB,YAAa,SAACmB,GACZF,QAAQC,IAAI,wFAGhB,cAAC,EAAD,CACExB,KAAM,IACNE,UAAU,EACVE,UAAW,kBAAMmB,QAAQC,IAAI,6DAC7BnB,YAAa,SAACoB,GACZF,QAAQC,IAAI,2FAEdlB,YAAa,SAACmB,GACZF,QAAQC,IAAI,wFAGhB,cAAC,EAAD,CACEtB,UAAU,EACVH,UAAW,IACXK,UAAW,kBAAMmB,QAAQC,IAAI,6DAC7BnB,YAAa,SAACoB,GACZF,QAAQC,IAAI,2FAEdlB,YAAa,SAACmB,GACZF,QAAQC,IAAI,4FCvBPE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.05f6a0ae.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Timer.css\";\n\nfunction Timer({\n  startTime = 10000,\n  step = 1000,\n  autoStart = false,\n  autoLoop = false,\n  onTick = () => {},\n  onTimeEnd = () => {},\n  onTimeStart = () => {},\n  onTimePause = () => {},\n}) {\n  const [timerId, setTimerId] = useState(null);\n  const [currentTime, setCurrentTime] = useState(startTime);\n\n  useEffect(() => {\n    if (autoStart) {\n      start();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (currentTime < 0) {\n      stop();\n      onTimeEnd();\n      setCurrentTime(startTime);\n      if (autoLoop) {\n        start();\n      }\n    }\n  });\n\n  const start = () => {\n    const timerId = setInterval(handleTick, step);\n    setTimerId(timerId);\n  };\n\n  const stop = () => {\n    clearInterval(timerId);\n    setTimerId(null);\n  };\n\n  function handleStartTimer() {\n    start();\n    onTimeStart(startTime);\n  }\n\n  function handlePauseTimer() {\n    stop();\n    onTimePause(currentTime);\n  }\n\n  function handleTick() {\n    setCurrentTime((currentTime) => currentTime - step);\n    onTick(currentTime - step);\n  }\n\n  return (\n    <div className=\"timer\">\n      <div className=\"buttons-group\">\n        {!timerId && (\n          <button className=\"button start-button\" onClick={handleStartTimer}>\n            Start\n          </button>\n        )}\n        {timerId && (\n          <button className=\"button pause-button\" onClick={handlePauseTimer}>\n            Pause\n          </button>\n        )}\n      </div>\n      <div className=\"time\">{currentTime}</div>\n      <progress\n        className=\"progress-line\"\n        max={startTime}\n        value={currentTime}\n      ></progress>\n    </div>\n  );\n}\n\nexport default Timer;\n","import Timer from \"./Timer\";\n\nfunction App() {\n  return (\n    <div>\n      <Timer\n        step={100}\n        autoStart={true}\n        onTimeEnd={() => console.log(\"Час вийшов!\")}\n        onTimeStart={(timeLeft) => {\n          console.log(\"Таймер запущено!\");\n        }}\n        onTimePause={(timeLeft) => {\n          console.log(\"Таймер на паузі!\");\n        }}\n      />\n      <Timer\n        step={500}\n        autoLoop={true}\n        onTimeEnd={() => console.log(\"Час вийшов!\")}\n        onTimeStart={(timeLeft) => {\n          console.log(\"Таймер запущено!\");\n        }}\n        onTimePause={(timeLeft) => {\n          console.log(\"Таймер на паузі!\");\n        }}\n      />\n      <Timer\n        autoLoop={false}\n        startTime={500000}\n        onTimeEnd={() => console.log(\"Час вийшов!\")}\n        onTimeStart={(timeLeft) => {\n          console.log(\"Таймер запущено!\");\n        }}\n        onTimePause={(timeLeft) => {\n          console.log(\"Таймер на паузі!\");\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}